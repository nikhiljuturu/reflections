
diff -u file1.txt file2.txt #for unix,terminal
fc file1.txt file2.txt #for windows



How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

A : By knowing what changes were made at each point of time and understanding how they affected the program, efficiency of a programmer is increased and mistakes are not repeated.

git diff commit_id_1 commit_id_2 #This shows us the difference between the two versions of the code on git.

How often to commit? #one commit per logical change and explaining it is a good rule of thumb.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
A : Manual committing gives more power to the user to choose which change is important vs which isn't and can efficiently allocate commits without cluttering everything up. 
 cont. - This leaves a scope for error like power cuts or system crashes, where all the work is lost. Automatic commits would help with that but might clutter stuff up.
 
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
A : Multiple files together make programs and are affected together somehow.


3884eab839af1e82c44267484cf2945a766081f3 - latest commit id

How might using version control make you more confident to make changes that could break something?
A: you can always revert back to the working versions

